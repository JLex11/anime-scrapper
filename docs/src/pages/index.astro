---
import { getCollection } from 'astro:content'
import DocsLayout, { type DocsGroup } from '../layouts/DocsLayout.astro'

const docs = await getCollection('docs')

const groups = Array.from(
	docs.reduce((acc, entry) => {
		const category = entry.data.category ?? 'General'
		if (!acc.has(category)) {
			acc.set(category, [])
		}
		acc.get(category)?.push(entry)
		return acc
	}, new Map<string, typeof docs>())
)
	.map(([category, entries]) => ({
		category,
		entries: entries.sort((a, b) => a.data.order - b.data.order),
	}))
	.sort((a, b) => {
		const scoreA = Math.min(...a.entries.map(entry => entry.data.order ?? 0))
		const scoreB = Math.min(...b.entries.map(entry => entry.data.order ?? 0))
		if (scoreA !== scoreB) return scoreA - scoreB
		return a.category.localeCompare(b.category)
	}) satisfies DocsGroup[]

const introduction = docs
	.filter(entry => entry.data.category === 'Introducción')
	.sort((a, b) => a.data.order - b.data.order)[0]

const IntroductionContent = introduction ? (await introduction.render()).Content : null
const baseUrl = (import.meta.env.BASE_URL ?? '/').replace(/\/$/, '')
const withBase = (path: string) => {
	if (path === '/' || path === '') {
		return baseUrl === '' ? '/' : baseUrl
	}
	const normalized = path.startsWith('/') ? path : `/${path}`
	return (baseUrl + normalized).replace(/\/\/+/, '/')
}
---
<DocsLayout groups={groups} doc={introduction} title="Anime Scrapper API">
	<section class="hero">
		<h1>Documentación del Anime Scrapper API</h1>
		<p>
			Explora los recursos públicos del servicio, consulta ejemplos de uso en Markdown y prueba los
			endpoints sin salir de la documentación interactiva construida con Astro.
		</p>
		<div class="actions">
			<a class="primary" href={withBase('/docs/episodios/ultimos-episodios/')}>Ver últimos episodios</a>
			<a class="secondary" href={withBase('/docs/animes/lista-de-animes/')}>Explorar catálogo</a>
		</div>
	</section>

	{IntroductionContent && (
		<section class="content-block">
			<IntroductionContent />
		</section>
	)}

	<section class="grid">
		{groups.map(group => (
			<a class="card" href={withBase(`/docs/${group.entries[0].slug}/`)}>
				<h3>{group.category}</h3>
				<p>{group.entries[0].data.description ?? 'Explora los endpoints disponibles en esta categoría.'}</p>
				<span>Ver documentación →</span>
			</a>
		))}
	</section>
</DocsLayout>

<style>
	.hero {
		display: grid;
		gap: 1rem;
	}

	.hero h1 {
		font-size: clamp(2.2rem, 5vw, 3rem);
		margin-bottom: 0.5rem;
	}

	.hero p {
		font-size: 1.05rem;
		color: #cbd5f5;
		max-width: 50ch;
	}

	.actions {
		display: flex;
		flex-wrap: wrap;
		gap: 0.75rem;
		margin-top: 0.5rem;
	}

	.actions a {
		text-decoration: none;
		font-weight: 600;
		padding: 0.6rem 1.25rem;
		border-radius: 0.65rem;
		transition: transform 0.2s ease, box-shadow 0.2s ease;
	}

	.actions a:hover {
		transform: translateY(-1px);
		box-shadow: 0 12px 35px rgba(59, 130, 246, 0.25);
	}

	.actions .primary {
		background: linear-gradient(135deg, #0ea5e9, #6366f1);
		color: #f8fafc;
	}

	.actions .secondary {
		background: rgba(148, 163, 184, 0.15);
		color: #e2e8f0;
	}

	.content-block {
		margin-top: 2rem;
		padding: 1.5rem;
		border-radius: 1rem;
		background: rgba(15, 23, 42, 0.65);
		border: 1px solid rgba(148, 163, 184, 0.14);
	}

	.grid {
		margin-top: 2.5rem;
		display: grid;
		gap: 1.25rem;
		grid-template-columns: repeat(auto-fit, minmax(15rem, 1fr));
	}

	.card {
		text-decoration: none;
		background: rgba(15, 23, 42, 0.7);
		border: 1px solid rgba(148, 163, 184, 0.16);
		padding: 1.5rem;
		border-radius: 1rem;
		display: grid;
		gap: 0.65rem;
		color: #e2e8f0;
		transition: transform 0.2s ease, border 0.2s ease, background 0.2s ease;
	}

	.card:hover {
		transform: translateY(-3px);
		border-color: rgba(59, 130, 246, 0.5);
		background: rgba(37, 99, 235, 0.22);
	}

	.card span {
		font-weight: 600;
		color: #60a5fa;
	}

	@media (max-width: 640px) {
		.actions {
			flex-direction: column;
			align-items: stretch;
		}

		.grid {
			grid-template-columns: 1fr;
		}
	}
</style>
