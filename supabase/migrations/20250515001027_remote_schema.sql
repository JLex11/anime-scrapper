

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";






CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."animes" (
    "animeId" character varying NOT NULL,
    "title" character varying NOT NULL,
    "type" character varying DEFAULT 'Anime'::character varying,
    "rank" real DEFAULT '0'::real,
    "otherTitles" "text"[],
    "description" "text",
    "originalLink" character varying,
    "status" character varying,
    "genres" "text"[],
    "images" "jsonb",
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone
);


ALTER TABLE "public"."animes" OWNER TO "postgres";


COMMENT ON TABLE "public"."animes" IS 'data of the animes';



CREATE OR REPLACE FUNCTION "public"."full_anime_search"("public"."animes") RETURNS "text"
    LANGUAGE "sql" IMMUTABLE
    AS $_$
  SELECT $1.title || ' ' || $1.description || ' ' || $1.type || ' ' || array_to_string($1.genres, ', ') || ' ' || $1."otherTitles";
$_$;


ALTER FUNCTION "public"."full_anime_search"("public"."animes") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_anime_images_json"("anime_id" "text", "property" "text", "new_value" "jsonb") RETURNS SETOF "public"."animes"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  RETURN QUERY
  UPDATE animes
  SET images = jsonb_set(images, ARRAY[property], new_value)
  WHERE "animeId" = anime_id
  RETURNING *;
END;
$$;


ALTER FUNCTION "public"."update_anime_images_json"("anime_id" "text", "property" "text", "new_value" "jsonb") OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."episodes" (
    "_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "originalLink" character varying,
    "title" character varying,
    "image" character varying,
    "episode" integer DEFAULT 0,
    "animeId" character varying,
    "episodeId" "text" NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."episodes" OWNER TO "postgres";


COMMENT ON TABLE "public"."episodes" IS 'all episodes of all animes';



ALTER TABLE "public"."episodes" ALTER COLUMN "_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."episodes_episodeId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."animes"
    ADD CONSTRAINT "animes_pkey" PRIMARY KEY ("animeId");



ALTER TABLE ONLY "public"."episodes"
    ADD CONSTRAINT "episodes_episodeId_key" UNIQUE ("episodeId");



ALTER TABLE ONLY "public"."episodes"
    ADD CONSTRAINT "episodes_pkey" PRIMARY KEY ("episodeId");



ALTER TABLE ONLY "public"."episodes"
    ADD CONSTRAINT "episodes_animeId_fkey" FOREIGN KEY ("animeId") REFERENCES "public"."animes"("animeId") ON DELETE SET NULL;



CREATE POLICY "Enable insert for authenticated users only" ON "public"."animes" FOR INSERT TO "authenticated", "anon" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."episodes" FOR INSERT TO "authenticated", "anon" WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."animes" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."episodes" FOR SELECT USING (true);



CREATE POLICY "Enable update for authenticated users only" ON "public"."animes" FOR UPDATE TO "authenticated", "anon" USING (true) WITH CHECK (true);



CREATE POLICY "Enable update for authenticated users only" ON "public"."episodes" FOR UPDATE TO "authenticated", "anon" USING (true) WITH CHECK (true);



ALTER TABLE "public"."animes" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."episodes" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";


























































































































































































GRANT ALL ON TABLE "public"."animes" TO "anon";
GRANT ALL ON TABLE "public"."animes" TO "authenticated";
GRANT ALL ON TABLE "public"."animes" TO "service_role";



GRANT ALL ON FUNCTION "public"."full_anime_search"("public"."animes") TO "anon";
GRANT ALL ON FUNCTION "public"."full_anime_search"("public"."animes") TO "authenticated";
GRANT ALL ON FUNCTION "public"."full_anime_search"("public"."animes") TO "service_role";



GRANT ALL ON FUNCTION "public"."update_anime_images_json"("anime_id" "text", "property" "text", "new_value" "jsonb") TO "anon";
GRANT ALL ON FUNCTION "public"."update_anime_images_json"("anime_id" "text", "property" "text", "new_value" "jsonb") TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_anime_images_json"("anime_id" "text", "property" "text", "new_value" "jsonb") TO "service_role";


















GRANT ALL ON TABLE "public"."episodes" TO "anon";
GRANT ALL ON TABLE "public"."episodes" TO "authenticated";
GRANT ALL ON TABLE "public"."episodes" TO "service_role";



GRANT ALL ON SEQUENCE "public"."episodes_episodeId_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."episodes_episodeId_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."episodes_episodeId_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
